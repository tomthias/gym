// ========== NUTRITION PAGE LOGIC - REFACTORED ==========

import { nutritionRecipes } from '../data/nutrition.js';

// ========== STATE MANAGEMENT ==========
let currentDayType = 'workout'; // 'workout' or 'rest'
let currentMealKey = null;
let currentMeal = null;
let allRecipes = [];
let filteredRecipes = [];

// Check and reset selections if new day
function checkAndResetDaily() {
    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    const lastResetDate = localStorage.getItem('lastResetDate');

    if (lastResetDate !== today) {
        // New day! Reset selections
        localStorage.setItem('selectedRecipes', '{}');
        localStorage.setItem('lastResetDate', today);
        console.log('ðŸ”„ Daily reset: recipe selections cleared for new day');
    }
}

// Initialize and check for daily reset
checkAndResetDaily();

let selectedRecipes = JSON.parse(localStorage.getItem('selectedRecipes') || '{}');
let completedMeals = JSON.parse(localStorage.getItem('completedMeals') || '{}');

// Current filters
let activeFilters = {
    search: '',
    quick: 'all', // 'all', 'veloce', 'veggie'
    advanced: [] // ['carne', 'pesce', 'time-5', etc.]
};

// ========== ICON SYSTEM ==========
// Icon SVG content - read directly from assets/icons/ files
// All SVGs use fill="currentColor" to allow dynamic coloring via CSS
const ICONS_SVG = {
    // Fast icon (from fast.svg)
    fast: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14 1.25C14.4142 1.25 14.75 1.58579 14.75 2C14.75 2.3797 14.4678 2.69349 14.1018 2.74315L14 2.75H10C9.58579 2.75 9.25 2.41421 9.25 2C9.25 1.6203 9.53215 1.30651 9.89823 1.25685L10 1.25H14Z" fill="currentColor"/><path d="M8.46967 9.46967C8.73594 9.2034 9.1526 9.1792 9.44621 9.39705L9.53033 9.46967L12.5303 12.4697C12.8232 12.7626 12.8232 13.2374 12.5303 13.5303C12.2641 13.7966 11.8474 13.8208 11.5538 13.6029L11.4697 13.5303L8.46967 10.5303C8.17678 10.2374 8.17678 9.76256 8.46967 9.46967Z" fill="currentColor"/><path d="M19.4697 4.46967C19.7626 4.17678 20.2374 4.17678 20.5303 4.46967C20.7966 4.73594 20.8208 5.1526 20.6029 5.44621L20.5303 5.53033L18.1903 7.87033C17.8974 8.16322 17.4226 8.16322 17.1297 7.87033C16.8634 7.60406 16.8392 7.1874 17.0571 6.89379L17.1297 6.80967L19.4697 4.46967Z" fill="currentColor"/><path d="M18.4697 3.46967C18.7359 3.2034 19.1526 3.1792 19.4462 3.39705L19.5303 3.46967L21.5303 5.46967C21.8232 5.76256 21.8232 6.23744 21.5303 6.53033C21.2641 6.7966 20.8474 6.8208 20.5538 6.60295L20.4697 6.53033L18.4697 4.53033C18.1768 4.23744 18.1768 3.76256 18.4697 3.46967Z" fill="currentColor"/><path d="M8 14.25C8.41421 14.25 8.75 14.5858 8.75 15C8.75 15.3797 8.46785 15.6935 8.10177 15.7432L8 15.75H3C2.58579 15.75 2.25 15.4142 2.25 15C2.25 14.6203 2.53215 14.3065 2.89823 14.2568L3 14.25H8Z" fill="currentColor"/><path d="M8 17.25C8.41421 17.25 8.75 17.5858 8.75 18C8.75 18.3797 8.46785 18.6935 8.10177 18.7432L8 18.75H5C4.58579 18.75 4.25 18.4142 4.25 18C4.25 17.6203 4.53215 17.3065 4.89823 17.2568L5 17.25H8Z" fill="currentColor"/><path d="M8 20.25C8.41421 20.25 8.75 20.5858 8.75 21C8.75 21.3797 8.46785 21.6935 8.10177 21.7432L8 21.75H7C6.58579 21.75 6.25 21.4142 6.25 21C6.25 20.6203 6.53215 20.3065 6.89823 20.2568L7 20.25H8Z" fill="currentColor"/><path d="M12 4.25C16.8322 4.25 20.75 8.16779 20.75 13C20.75 17.8322 16.8322 21.75 12 21.75C11.5858 21.75 11.25 21.4142 11.25 21C11.25 20.5858 11.5858 20.25 12 20.25C16.0038 20.25 19.25 17.0038 19.25 13C19.25 8.99621 16.0038 5.75 12 5.75C8.67858 5.75 5.81283 8.00879 4.9943 11.1871C4.89099 11.5882 4.48207 11.8296 4.08095 11.7263C3.67982 11.623 3.43839 11.2141 3.5417 10.8129C4.52967 6.97678 7.98916 4.25 12 4.25Z" fill="currentColor"/></svg>`,

    // Veggie icon (from veggie.svg)
    veggie: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.96186 7.37137C10.6614 4.8358 14.0952 4.15813 16.6308 5.8577C16.8296 5.991 17.0198 6.13755 17.2177 6.3118L17.4609 6.54032C19.6193 8.69858 19.6199 12.1982 17.4619 14.3567C17.2077 14.6109 16.9294 14.8402 16.6308 15.0403L6.66303 21.72C5.41096 22.5582 3.74084 22.3958 2.67475 21.3313C1.60677 20.2655 1.44258 18.5923 2.28217 17.3382L8.96186 7.37137ZM15.6142 6.98954C13.7875 5.89901 11.4063 6.41865 10.208 8.20633L3.52827 18.1731C3.08759 18.8314 3.17449 19.7091 3.7353 20.2688C4.29502 20.8277 5.17106 20.9136 5.82807 20.4739L15.7958 13.7942C16.0133 13.6485 16.2162 13.4813 16.4013 13.2962C17.9736 11.7235 17.973 9.17401 16.4179 7.61844L16.2099 7.42215C16.0788 7.30708 15.9398 7.20094 15.7949 7.10379L15.6142 6.98954Z" fill="currentColor"/><path d="M16.6085 1.75C17.3944 1.75055 18.0831 2.16613 18.4674 2.78942L18.494 2.836C19.1727 2.65828 19.9136 2.80869 20.471 3.28572L20.5971 3.40245C21.1217 3.92661 21.3237 4.65141 21.203 5.33008L21.164 5.505L21.2106 5.53261C21.7923 5.89131 22.1931 6.51529 22.2444 7.23611L22.25 7.392C22.25 8.54521 21.3558 9.48958 20.2229 9.56952L20.067 9.575H18.053C17.6388 9.575 17.303 9.23921 17.303 8.825C17.303 8.4453 17.5852 8.13151 17.9512 8.08184L18.053 8.075H20.067C20.4442 8.075 20.75 7.76921 20.75 7.39252C20.7498 7.04944 20.497 6.76546 20.1675 6.71647L20.0665 6.709C19.4336 6.70855 19.1004 5.98345 19.4689 5.50563L19.5373 5.42804L19.6092 5.34348C19.7795 5.1065 19.7794 4.78485 19.6085 4.54773L19.536 4.4627L19.4515 4.39083C19.2145 4.22047 18.8929 4.22061 18.6561 4.39116L18.5716 4.46311C18.1242 4.91083 17.3756 4.63453 17.2976 4.03616L17.291 3.93352C17.2907 3.55613 16.9849 3.25026 16.608 3.25C16.2651 3.25 15.9812 3.50272 15.9324 3.83207L15.925 3.933V5.947C15.925 6.36121 15.5892 6.697 15.175 6.697C14.7953 6.697 14.4815 6.41485 14.4318 6.04877L14.425 5.947V3.933C14.425 2.72736 15.4024 1.75 16.6085 1.75Z" fill="currentColor"/><path d="M13.7397 11.9997C14.0059 11.7334 14.4226 11.7092 14.7162 11.9271L14.8003 11.9997L16.7103 13.9097C17.0032 14.2026 17.0032 14.6774 16.7103 14.9703C16.4441 15.2366 16.0274 15.2608 15.7338 15.0429L15.6497 14.9703L13.7397 13.0603C13.4468 12.7674 13.4468 12.2926 13.7397 11.9997Z" fill="currentColor"/><path d="M6.78967 10.6497C7.05594 10.3834 7.4726 10.3592 7.76621 10.5771L7.85033 10.6497L9.90033 12.6997C10.1932 12.9926 10.1932 13.4674 9.90033 13.7603C9.63407 14.0266 9.2174 14.0508 8.92379 13.8329L8.83967 13.7603L6.78967 11.7103C6.49678 11.4174 6.49678 10.9426 6.78967 10.6497Z" fill="currentColor"/><path d="M6.73967 16.1997C7.00594 15.9334 7.4226 15.9092 7.71622 16.1271L7.80033 16.1997L10.0003 18.3997C10.2932 18.6926 10.2932 19.1674 10.0003 19.4603C9.73407 19.7266 9.3174 19.7508 9.02379 19.5329L8.93967 19.4603L6.73967 17.2603C6.44678 16.9674 6.44678 16.4926 6.73967 16.1997Z" fill="currentColor"/></svg>`,

    // Meat icon (from meat.svg)
    meat: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.78907 8.49475C11.3461 6.17479 16.2427 7.39477 19.918 11.0699C22.3611 13.513 22.361 17.4745 19.918 19.9176C17.4748 22.3607 13.514 22.3604 11.0654 19.9117L10.8447 19.6871C7.26783 15.9582 6.18323 11.0938 8.63868 8.63831L8.78907 8.49475ZM18.8574 12.1315C15.6194 8.89348 11.4884 7.90986 9.69922 9.69885C7.95398 11.4441 8.84384 15.4343 11.9219 18.6432L12.1309 18.8571C13.9882 20.7144 17.0001 20.7144 18.8574 18.8571C20.7145 16.9998 20.7144 13.9888 18.8574 12.1315Z" fill="currentColor"/><path d="M6.795 2.255C8.11784 2.255 9.20022 3.28448 9.2847 4.58596L9.29 4.75001V6.109L11.0003 7.81967C11.2666 8.08594 11.2908 8.5026 11.073 8.79622L11.0003 8.88033C10.7341 9.1466 10.3174 9.17081 10.0238 8.95295L9.93967 8.88033L8.00968 6.95034C7.89715 6.83781 7.82408 6.69322 7.79935 6.53804L7.79 6.42V4.75001C7.79 4.20048 7.34453 3.755 6.795 3.755C6.28473 3.755 5.86418 4.13911 5.8067 4.63397L5.8 4.75V5.05C5.8 5.4297 5.51785 5.7435 5.15178 5.79316L5.05 5.8H4.75001C4.20048 5.8 3.755 6.24548 3.755 6.795C3.755 7.30528 4.13911 7.72583 4.63397 7.78331L4.75001 7.79H6.42C6.57913 7.79 6.73305 7.84058 6.86027 7.93282L6.95034 8.00967L8.88033 9.93967C9.17323 10.2326 9.17323 10.7074 8.88033 11.0003C8.61407 11.2666 8.1974 11.2908 7.90379 11.073L7.81967 11.0003L6.108 9.289L4.75001 9.29C3.42717 9.29 2.34479 8.26053 2.26031 6.95905L2.255 6.795C2.255 5.58241 3.12005 4.57185 4.26669 4.34678L4.335 4.335L4.34678 4.26669C4.56162 3.17217 5.49216 2.33423 6.63096 2.26031L6.795 2.255Z" fill="currentColor"/></svg>`,

    // Fish icon (from fish.svg)
    fish: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 2.25C12.3848 2.25 16.75 6.61523 16.75 12V15.3418C16.75 16.1194 16.1194 16.75 15.3418 16.75H12C6.61523 16.75 2.25 12.3848 2.25 7V4.85742C2.25 3.41754 3.41754 2.25 4.85742 2.25H7ZM4.85742 3.75C4.24597 3.75 3.75 4.24597 3.75 4.85742V7C3.75 11.5563 7.44365 15.25 12 15.25L15.249 15.249L15.25 12C15.25 7.52803 11.6916 3.88722 7.25195 3.75391L7 3.75H4.85742Z" fill="currentColor"/><path d="M6.03682 5.39097L6.13414 5.38429L6.244 5.391C6.61347 5.43894 6.90173 5.7302 6.94546 6.0932L6.9512 6.19385C6.9512 6.63969 6.59072 7.00163 6.14487 7.00342C5.69775 7.00522 5.33383 6.64422 5.33203 6.1971C5.33036 5.78437 5.63784 5.44254 6.03682 5.39097Z" fill="currentColor"/><path d="M9.5 5.743C9.91421 5.743 10.25 6.07879 10.25 6.493C10.25 8.56406 8.57106 10.243 6.5 10.243C6.08579 10.243 5.75 9.90721 5.75 9.493C5.75 9.1133 6.03215 8.79951 6.39823 8.74985L6.5 8.743C7.69086 8.743 8.66565 7.81783 8.74481 6.64705L8.75 6.493C8.75 6.07879 9.08579 5.743 9.5 5.743Z" fill="currentColor"/><path d="M15.3713 3.977C15.9988 3.977 16.6006 4.22629 17.0444 4.67003C17.9264 5.55206 17.9665 6.9572 17.1647 7.8868L17.0444 8.01626L15.8794 9.1812C15.5865 9.4741 15.1117 9.4741 14.8188 9.1812C14.5525 8.91494 14.5283 8.49827 14.7462 8.20466L14.8188 8.12054L15.9837 6.95561C16.322 6.61735 16.322 6.06894 15.9837 5.73069C15.8483 5.59533 15.6728 5.5094 15.4851 5.48451L15.3713 5.477H12.2859C11.8717 5.477 11.5359 5.14121 11.5359 4.727C11.5359 4.3473 11.8181 4.03351 12.1841 3.98385L12.2859 3.977H15.3713Z" fill="currentColor"/><path d="M4.727 11.5359C5.1067 11.5359 5.42049 11.8181 5.47015 12.1841L5.477 12.2859V15.3713C5.477 15.601 5.56826 15.8213 5.73069 15.9837C6.04075 16.2938 6.5274 16.3196 6.8669 16.0612L6.95559 15.9837L8.12054 14.8188C8.41343 14.5259 8.8883 14.5259 9.1812 14.8188C9.44746 15.085 9.47167 15.5017 9.25381 15.7953L9.1812 15.8794L8.01625 17.0444C7.0922 17.9684 5.59405 17.9684 4.67002 17.0444C4.27066 16.645 4.0288 16.1176 3.98442 15.5586L3.977 15.3713V12.2859C3.977 11.8717 4.31279 11.5359 4.727 11.5359Z" fill="currentColor"/><path d="M17.262 14.291C19.2106 14.012 21.0865 15.1679 21.7112 17.042C21.8038 17.32 21.7259 17.626 21.512 17.8262L21.3411 17.9864C20.6757 18.5692 19.8334 18.9086 18.9524 18.9532L18.9319 19.2168C18.8373 20.0143 18.4995 20.7662 17.9622 21.3682L17.8089 21.5303C17.6029 21.7361 17.2965 21.8046 17.0228 21.7051L16.8284 21.6338C14.998 20.9093 13.9422 18.9748 14.3353 17.0117L14.386 16.7998C14.7311 15.5435 15.7568 14.5864 17.0384 14.3301L17.262 14.291ZM19.9886 16.9014C19.4484 16.0891 18.4798 15.6319 17.4954 15.7725L17.3274 15.8008L17.179 15.8379C16.5767 16.0097 16.0934 16.4593 15.8851 17.0274L15.8392 17.1719L15.8001 17.3321C15.5885 18.3902 16.0584 19.447 16.9231 20.0059L17.0569 20.0869L17.1028 20.0205C17.301 19.6965 17.4211 19.3284 17.4515 18.9463L17.4593 18.7539V18.209C17.4594 17.7949 17.7951 17.459 18.2093 17.459H18.7542C19.2119 17.459 19.657 17.3295 20.0315 17.0977L20.0862 17.0596L19.9886 16.9014Z" fill="currentColor"/></svg>`,

    // Egg icon (from egg.svg)
    egg: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7.5 5.25C10.4866 5.25 12.75 8.77086 12.75 13C12.75 13.4142 12.4142 13.75 12 13.75C11.5858 13.75 11.25 13.4142 11.25 13C11.25 9.49715 9.48397 6.75 7.5 6.75C5.51603 6.75 3.75 9.49715 3.75 13C3.75 13.4142 3.41421 13.75 3 13.75C2.58579 13.75 2.25 13.4142 2.25 13C2.25 8.77086 4.51341 5.25 7.5 5.25Z" fill="currentColor"/><path d="M16.5 5.5C19.4788 5.5 21.75 8.9068 21.75 13C21.75 13.4142 21.4142 13.75 21 13.75C20.5858 13.75 20.25 13.4142 20.25 13C20.25 9.63736 18.4918 7 16.5 7C14.5082 7 12.75 9.63736 12.75 13C12.75 13.4142 12.4142 13.75 12 13.75C11.5858 13.75 11.25 13.4142 11.25 13C11.25 8.9068 13.5212 5.5 16.5 5.5Z" fill="currentColor"/><path d="M21 12.25C21.9665 12.25 22.75 13.0335 22.75 14V15C22.75 15.9665 21.9665 16.75 21 16.75H3C2.0335 16.75 1.25 15.9665 1.25 15V14C1.25 13.0335 2.0335 12.25 3 12.25H21ZM3 13.75C2.86193 13.75 2.75 13.8619 2.75 14V15C2.75 15.1381 2.86193 15.25 3 15.25H21C21.1381 15.25 21.25 15.1381 21.25 15V14C21.25 13.8619 21.1381 13.75 21 13.75H3Z" fill="currentColor"/><path d="M3 15.25C3.3797 15.25 3.69349 15.5322 3.74315 15.8982L3.75 16V16.182C3.75 17.3055 3.95409 18.4196 4.34919 19.4618C4.52137 19.9004 4.92486 20.2002 5.3908 20.2444L5.5193 20.25H8.86383C9.3415 20.25 9.77327 19.9784 9.98287 19.5573L10.0344 19.4388L10.2978 18.7366C10.4432 18.3488 10.8755 18.1523 11.2634 18.2978C11.6189 18.4311 11.8136 18.8055 11.7316 19.1657L11.7022 19.2634L11.4389 19.9656C11.0587 20.9793 10.1223 21.6699 9.05369 21.7435L8.86383 21.75L5.52446 21.75C4.38984 21.7578 3.36757 21.0661 2.94977 20.0017C2.53851 18.917 2.30547 17.7739 2.25877 16.6166L2.25 16.182V16C2.25 15.5858 2.58579 15.25 3 15.25Z" fill="currentColor"/><path d="M21 15.25C21.3797 15.25 21.6935 15.5322 21.7432 15.8982L21.75 16V16.182C21.75 17.4871 21.5129 18.7813 21.0471 20.0098C20.6556 21.0073 19.722 21.6798 18.6679 21.7449L18.4807 21.75H15.136C14.0533 21.75 13.078 21.1157 12.6339 20.141L12.5611 19.9656L12.2978 19.2634C12.1523 18.8755 12.3488 18.4432 12.7366 18.2978C13.0922 18.1644 13.485 18.3184 13.6601 18.6438L13.7022 18.7366L13.9656 19.4389C14.1333 19.8861 14.5392 20.195 15.007 20.2434L15.136 20.25L18.4859 20.2501C18.9999 20.2536 19.463 19.9402 19.6477 19.4699C20.0017 18.5361 20.2023 17.5522 20.2425 16.556L20.25 16.182V16C20.25 15.5858 20.5858 15.25 21 15.25Z" fill="currentColor"/><path d="M13 18.25C13.4142 18.25 13.75 18.5858 13.75 19C13.75 19.3797 13.4678 19.6935 13.1018 19.7432L13 19.75H11C10.5858 19.75 10.25 19.4142 10.25 19C10.25 18.6203 10.5322 18.3065 10.8982 18.2568L11 18.25H13Z" fill="currentColor"/></svg>`,

    // Protein icon (from protein.svg)
    protein: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9.78865 4.61023C13.2888 2.649 17.6071 2.81559 20.9508 5.06531C22.0714 5.81705 22.7452 7.07651 22.7496 8.44715L22.7437 8.68152C22.6796 9.79967 22.148 10.8406 21.2711 11.5546C15.5569 16.0985 7.39154 15.8311 1.97908 10.9159C1.50858 10.4761 1.24396 9.85917 1.25057 9.18836L1.25936 9.01258C1.35377 7.96868 2.14218 7.11541 3.18123 6.94226L3.83846 6.83582C5.83366 6.48354 7.75413 5.78517 9.51131 4.77136L9.50057 4.77625L9.78865 4.61023ZM20.1138 6.31043C17.1601 4.32315 13.3229 4.22698 10.273 6.06336L9.81404 6.32019C7.8674 7.37419 5.75037 8.07872 3.57088 8.39832L3.42732 8.42176C3.06294 8.48264 2.7862 8.78261 2.75545 9.11414L2.74959 9.2284C2.74752 9.45238 2.83986 9.66767 2.99568 9.81336C7.85593 14.2268 15.1988 14.4671 20.3306 10.3866C20.8739 9.94427 21.2056 9.29377 21.2447 8.62L21.2506 8.43054C21.2476 7.57937 20.8216 6.78515 20.1138 6.31043Z" fill="currentColor"/><path d="M14.9036 7.62092C15.0574 7.23633 15.4939 7.04926 15.8785 7.20309C16.231 7.3441 16.4176 7.72262 16.3278 8.08095L16.2963 8.17799L15.0964 11.178C14.9426 11.5626 14.5061 11.7496 14.1215 11.5958C13.7689 11.4548 13.5824 11.0763 13.6722 10.7179L13.7037 10.6209L14.9036 7.62092Z" fill="currentColor"/><path d="M10.9036 7.62092C11.0574 7.23633 11.4939 7.04926 11.8785 7.20309C12.2311 7.3441 12.4176 7.72262 12.3278 8.08095L12.2963 8.17799L11.0964 11.178C10.9426 11.5626 10.5061 11.7496 10.1215 11.5958C9.76896 11.4548 9.58239 11.0763 9.67223 10.7179L9.70367 10.6209L10.9036 7.62092Z" fill="currentColor"/><path d="M22 7.67827C22.3797 7.67827 22.6935 7.96043 22.7432 8.3265L22.75 8.42827L22.75 14.0327C22.7428 15.5682 22.0019 17.0076 20.7586 17.9043C15.5359 21.6985 8.46409 21.6985 3.24345 17.9058C2.06366 17.0549 1.33663 15.7182 1.25721 14.2713L1.25 14.0292V9.22181C1.25 8.8076 1.58579 8.47181 2 8.47181C2.3797 8.47181 2.69349 8.75397 2.74315 9.12004L2.75 9.22181L2.74999 14.0257C2.75497 15.0816 3.26448 16.0715 4.123 16.6907C8.82001 20.103 15.18 20.103 19.8791 16.6892C20.6784 16.1127 21.1756 15.2119 21.2423 14.2388L21.25 14.0292V8.42827C21.25 8.01406 21.5858 7.67827 22 7.67827Z" fill="currentColor"/></svg>`,

    // Carbs icon (from carbs.svg)
    carbs: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.4714 3.41429C19.7653 3.12238 20.2402 3.12397 20.5321 3.41784C23.1233 6.02646 21.2024 11.8279 16.5451 16.5167C11.8856 21.2076 6.11555 23.1439 3.51973 20.5306C3.22783 20.2368 3.22942 19.7619 3.5233 19.47C3.81717 19.1781 4.29204 19.1797 4.58395 19.4735C6.39211 21.2939 11.3325 19.636 15.4809 15.4596C19.6315 11.281 21.2807 6.29995 19.4679 4.47494C19.176 4.18107 19.1776 3.7062 19.4714 3.41429Z" fill="currentColor"/><path d="M7.60593 7.95398C9.46442 7.93194 11.2521 8.66578 12.5591 9.98722C12.8504 10.2817 12.8478 10.7566 12.5533 11.0479C12.2588 11.3391 11.784 11.3365 11.4927 11.042C10.4718 10.0099 9.07538 9.43666 7.63542 9.45364C6.48287 9.48531 5.55967 10.419 5.54107 11.5658L5.54636 11.8567L5.56999 12.174L5.79541 12.2073C6.82475 12.3799 7.79883 12.8046 8.62865 13.4472L8.85132 13.6278C9.16703 13.8959 9.20558 14.3692 8.93744 14.6849C8.66929 15.0007 8.19599 15.0392 7.88028 14.7711C7.04452 14.0612 5.99247 13.6562 4.89646 13.6224C4.54945 13.6117 4.25514 13.3642 4.18503 13.0242C4.08528 12.5404 4.03704 12.0474 4.04119 11.5475C4.07287 9.59183 5.63901 8.00793 7.60593 7.95398Z" fill="currentColor"/><path d="M2.69234 14.0292C3.09471 12.7974 4.31065 12.0208 5.60914 12.1753C6.80791 12.3369 7.93509 12.8393 8.85678 13.6226C9.1724 13.8909 9.2108 14.3642 8.94255 14.6798C8.6743 14.9954 8.20098 15.0338 7.88536 14.7656C7.18248 14.1682 6.32289 13.7851 5.42036 13.6633C4.84357 13.5947 4.29855 13.9428 4.11916 14.492C3.41223 16.6869 3.59501 18.4779 4.58395 19.4735C4.87586 19.7674 4.87426 20.2423 4.58038 20.5342C4.28651 20.8261 3.81164 20.8245 3.51973 20.5306C2.07073 19.0718 1.82951 16.7082 2.69234 14.0292Z" fill="currentColor"/><path d="M10.9852 4.67236L11.2056 4.67444C12.9461 4.73933 14.5966 5.46474 15.8213 6.70314C16.1125 6.99765 16.1099 7.47252 15.8154 7.76378C15.5208 8.05504 15.046 8.0524 14.7547 7.75789C13.7982 6.79065 12.5091 6.22408 11.1485 6.17336C10.5287 6.14925 9.92627 6.38171 9.48327 6.81597C9.17317 7.11995 8.96038 7.504 8.8646 7.91814L8.83799 8.05501L8.99244 8.08262C10.2427 8.32431 11.4053 8.91075 12.3456 9.78087L12.5591 9.98722C12.8504 10.2817 12.8478 10.7566 12.5533 11.0479C12.2588 11.3391 11.784 11.3365 11.4927 11.042C10.568 10.1091 9.33306 9.54929 8.02199 9.46827C7.64459 9.44495 7.34357 9.14434 7.31974 8.76697L7.30788 8.49653C7.2883 7.4635 7.69539 6.46808 8.43323 5.7448C9.11836 5.07318 10.0324 4.69137 10.9852 4.67236Z" fill="currentColor"/><path d="M10.3013 4.87911C13.8649 1.84156 18.2366 1.10795 20.5321 3.41784C20.8241 3.71165 20.8225 4.18637 20.5287 4.47834C20.2349 4.77032 19.7599 4.76875 19.4679 4.47494C17.8412 2.83806 14.3133 3.43033 11.2743 6.02069C10.9591 6.28939 10.4857 6.25166 10.217 5.93642C9.94829 5.62118 9.98601 5.14781 10.3013 4.87911Z" fill="currentColor"/></svg>`,

    // Fats icon (from fats.svg - same as carbs but with different naming)
    fats: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.4714 3.41429C19.7653 3.12238 20.2402 3.12397 20.5321 3.41784C23.1233 6.02646 21.2024 11.8279 16.5451 16.5167C11.8856 21.2076 6.11555 23.1439 3.51973 20.5306C3.22783 20.2368 3.22942 19.7619 3.5233 19.47C3.81717 19.1781 4.29204 19.1797 4.58395 19.4735C6.39211 21.2939 11.3325 19.636 15.4809 15.4596C19.6315 11.281 21.2807 6.29995 19.4679 4.47494C19.176 4.18107 19.1776 3.7062 19.4714 3.41429Z" fill="currentColor"/><path d="M7.60593 7.95398C9.46442 7.93194 11.2521 8.66578 12.5591 9.98722C12.8504 10.2817 12.8478 10.7566 12.5533 11.0479C12.2588 11.3391 11.784 11.3365 11.4927 11.042C10.4718 10.0099 9.07538 9.43666 7.63542 9.45364C6.48287 9.48531 5.55967 10.419 5.54107 11.5658L5.54636 11.8567L5.56999 12.174L5.79541 12.2073C6.82475 12.3799 7.79883 12.8046 8.62865 13.4472L8.85132 13.6278C9.16703 13.8959 9.20558 14.3692 8.93744 14.6849C8.66929 15.0007 8.19599 15.0392 7.88028 14.7711C7.04452 14.0612 5.99247 13.6562 4.89646 13.6224C4.54945 13.6117 4.25514 13.3642 4.18503 13.0242C4.08528 12.5404 4.03704 12.0474 4.04119 11.5475C4.07287 9.59183 5.63901 8.00793 7.60593 7.95398Z" fill="currentColor"/><path d="M2.69234 14.0292C3.09471 12.7974 4.31065 12.0208 5.60914 12.1753C6.80791 12.3369 7.93509 12.8393 8.85678 13.6226C9.1724 13.8909 9.2108 14.3642 8.94255 14.6798C8.6743 14.9954 8.20098 15.0338 7.88536 14.7656C7.18248 14.1682 6.32289 13.7851 5.42036 13.6633C4.84357 13.5947 4.29855 13.9428 4.11916 14.492C3.41223 16.6869 3.59501 18.4779 4.58395 19.4735C4.87586 19.7674 4.87426 20.2423 4.58038 20.5342C4.28651 20.8261 3.81164 20.8245 3.51973 20.5306C2.07073 19.0718 1.82951 16.7082 2.69234 14.0292Z" fill="currentColor"/><path d="M10.9852 4.67236L11.2056 4.67444C12.9461 4.73933 14.5966 5.46474 15.8213 6.70314C16.1125 6.99765 16.1099 7.47252 15.8154 7.76378C15.5208 8.05504 15.046 8.0524 14.7547 7.75789C13.7982 6.79065 12.5091 6.22408 11.1485 6.17336C10.5287 6.14925 9.92627 6.38171 9.48327 6.81597C9.17317 7.11995 8.96038 7.504 8.8646 7.91814L8.83799 8.05501L8.99244 8.08262C10.2427 8.32431 11.4053 8.91075 12.3456 9.78087L12.5591 9.98722C12.8504 10.2817 12.8478 10.7566 12.5533 11.0479C12.2588 11.3391 11.784 11.3365 11.4927 11.042C10.568 10.1091 9.33306 9.54929 8.02199 9.46827C7.64459 9.44495 7.34357 9.14434 7.31974 8.76697L7.30788 8.49653C7.2883 7.4635 7.69539 6.46808 8.43323 5.7448C9.11836 5.07318 10.0324 4.69137 10.9852 4.67236Z" fill="currentColor"/><path d="M10.3013 4.87911C13.8649 1.84156 18.2366 1.10795 20.5321 3.41784C20.8241 3.71165 20.8225 4.18637 20.5287 4.47834C20.2349 4.77032 19.7599 4.76875 19.4679 4.47494C17.8412 2.83806 14.3133 3.43033 11.2743 6.02069C10.9591 6.28939 10.4857 6.25166 10.217 5.93642C9.94829 5.62118 9.98601 5.14781 10.3013 4.87911Z" fill="currentColor"/></svg>`,

    // Clock icon (from clock.svg)
    clock: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 11.25C13.2426 11.25 14.25 12.2574 14.25 13.5C14.25 14.7426 13.2426 15.75 12 15.75C10.7574 15.75 9.75 14.7426 9.75 13.5C9.75 12.2574 10.7574 11.25 12 11.25ZM12 12.75C11.5858 12.75 11.25 13.0858 11.25 13.5C11.25 13.9142 11.5858 14.25 12 14.25C12.4142 14.25 12.75 13.9142 12.75 13.5C12.75 13.0858 12.4142 12.75 12 12.75Z" fill="currentColor"/><path d="M14.7307 9.87179C15.0236 9.5789 15.4985 9.5789 15.7913 9.87179C16.0576 10.1381 16.0818 10.5547 15.864 10.8483L15.7913 10.9324L13.6686 13.0552C13.3757 13.3481 12.9008 13.3481 12.6079 13.0552C12.3416 12.789 12.3174 12.3723 12.5353 12.0787L12.6079 11.9946L14.7307 9.87179Z" fill="currentColor"/><path d="M12 5.25C16.5563 5.25 20.25 8.94365 20.25 13.5C20.25 18.0563 16.5563 21.75 12 21.75C7.44365 21.75 3.75 18.0563 3.75 13.5C3.75 8.94365 7.44365 5.25 12 5.25ZM12 6.75C8.27208 6.75 5.25 9.77208 5.25 13.5C5.25 17.2279 8.27208 20.25 12 20.25C15.7279 20.25 18.75 17.2279 18.75 13.5C18.75 9.77208 15.7279 6.75 12 6.75Z" fill="currentColor"/><path d="M12 2.25C12.3797 2.25 12.6935 2.53215 12.7432 2.89823L12.75 3V6C12.75 6.41421 12.4142 6.75 12 6.75C11.6203 6.75 11.3065 6.46785 11.2568 6.10177L11.25 6V3C11.25 2.58579 11.5858 2.25 12 2.25Z" fill="currentColor"/><path d="M13.75 2.25C14.1642 2.25 14.5 2.58579 14.5 3C14.5 3.3797 14.2178 3.69349 13.8518 3.74315L13.75 3.75H10.25C9.83579 3.75 9.5 3.41421 9.5 3C9.5 2.6203 9.78215 2.30651 10.1482 2.25685L10.25 2.25H13.75Z" fill="currentColor"/><path d="M18.2111 6.27851C18.504 5.98562 18.9789 5.98562 19.2718 6.27851C19.5381 6.54478 19.5623 6.96144 19.3444 7.25505L19.2718 7.33917L17.857 8.7539C17.5642 9.04679 17.0893 9.04679 16.7964 8.7539C16.5301 8.48763 16.5059 8.07097 16.7238 7.77736L16.7964 7.69324L18.2111 6.27851Z" fill="currentColor"/><path d="M4.72821 6.27851C4.99447 6.01224 5.41114 5.98804 5.70475 6.20589L5.78887 6.27851L7.20361 7.69324C7.4965 7.98613 7.4965 8.461 7.20361 8.7539C6.93735 9.02016 6.52068 9.04437 6.22707 8.82652L6.14295 8.7539L4.72821 7.33917C4.43532 7.04628 4.43532 6.57141 4.72821 6.27851Z" fill="currentColor"/></svg>`,

    // Dish icon (from dish.svg)
    dish: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.4238 3.01988C15.689 2.70167 16.1619 2.65868 16.4801 2.92385C16.7694 3.16492 16.8312 3.57768 16.6409 3.88981L16.5762 3.98016L11.5762 9.98016C11.311 10.2984 10.8381 10.3414 10.5199 10.0762C10.2306 9.83512 10.1688 9.42236 10.3591 9.11023L10.4238 9.01988L15.4238 3.01988Z" fill="currentColor"/><path d="M19.5315 4.91437C19.8549 4.65561 20.3269 4.70805 20.5857 5.0315C20.8209 5.32554 20.7989 5.74233 20.55 6.01009L20.4685 6.08567L15.4685 10.0857C15.1451 10.3444 14.6731 10.292 14.4143 9.96854C14.1791 9.6745 14.2011 9.25771 14.45 8.98995L14.5315 8.91437L19.5315 4.91437Z" fill="currentColor"/><path d="M19 12.25C20.4425 12.25 21.637 13.3643 21.7441 14.8233L21.75 15C21.75 16.4604 21.2765 17.8815 20.4004 19.0498C19.1256 20.7495 17.1246 21.75 15 21.75H9C6.97553 21.75 5.05951 20.8411 3.76855 19.2647L3.59961 19.0498C2.7871 17.9663 2.32001 16.6639 2.25684 15.2949L2.25 15C2.25 13.4812 3.48122 12.25 5 12.25H19ZM5 13.75C4.30972 13.75 3.75033 14.3095 3.75 14.9824L3.75586 15.2432C3.80458 16.2944 4.16778 17.3077 4.79004 18.1377L4.93848 18.3272C5.93468 19.5435 7.42543 20.25 9 20.25H15C16.6524 20.25 18.2087 19.4723 19.2002 18.1504C19.8818 17.2417 20.2505 16.1358 20.251 15.0274L20.2461 14.9063C20.1982 14.2571 19.6555 13.75 19 13.75H5Z" fill="currentColor"/></svg>`,

    // Pancake icon (from pancake.svg)
    pancake: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20.6957 12.0147C21.1099 12.0147 21.4457 12.3505 21.4457 12.7647C21.4457 13.1444 21.1635 13.4582 20.7974 13.5079L20.6957 13.5147H3C2.58579 13.5147 2.25 13.1789 2.25 12.7647C2.25 12.385 2.53216 12.0712 2.89823 12.0216L3 12.0147H20.6957Z" fill="currentColor"/><path d="M21 16.25C21.4142 16.25 21.75 16.5858 21.75 17C21.75 17.3797 21.4678 17.6935 21.1018 17.7431L21 17.75H3C2.58579 17.75 2.25 17.4142 2.25 17C2.25 16.6203 2.53216 16.3065 2.89823 16.2568L3 16.25H21Z" fill="currentColor"/><path d="M13.373 3.7863C14.976 3.78643 15.9336 4.97855 16 6.68669L16.0049 6.88005C15.9996 8.95074 14.3721 10.6386 12.3271 10.7424L12.1279 10.7482C9.99027 10.7482 8.25541 9.01765 8.25 6.8781C8.25004 5.13067 9.14216 3.87848 10.6953 3.79118L10.8711 3.7863L10.9805 3.79509L11.2783 3.82634C11.5054 3.8545 11.7315 3.89066 11.9561 3.93474L12.1211 3.96989L12.2881 3.93571C12.5123 3.89193 12.7382 3.85565 12.9648 3.82731L13.3047 3.79118L13.373 3.7863ZM13.0547 5.32829C12.7983 5.36332 12.5432 5.40966 12.291 5.46794C12.1794 5.49373 12.0627 5.49395 11.9512 5.46794C11.6996 5.4093 11.4452 5.36209 11.1895 5.32731L10.835 5.28728L10.7461 5.29216C10.142 5.34731 9.79494 5.81425 9.7539 6.6945L9.75 6.87614C9.75331 8.18685 10.8172 9.24821 12.1279 9.24821C13.3837 9.24799 14.4123 8.27367 14.499 7.03923L14.5039 6.89567V6.8781C14.5039 5.88186 14.1469 5.35126 13.498 5.29216L13.4092 5.28728L13.0547 5.32829Z" fill="currentColor"/><path d="M13.726 1.25C14.1402 1.24993 14.4761 1.58566 14.4761 1.99987C14.4762 2.37956 14.1941 2.69341 13.828 2.74313L13.7263 2.75C13.2924 2.75008 12.9344 3.0747 12.8819 3.49418L12.8752 3.6009V4.73527C12.8752 5.14948 12.5394 5.48527 12.1252 5.48527C11.7455 5.48527 11.4317 5.20311 11.3821 4.83704L11.3752 4.73527V3.60076C11.3755 2.30256 12.4278 1.25023 13.726 1.25Z" fill="currentColor"/><path d="M9.26846 4.7653C9.68264 4.76077 10.0221 5.09286 10.0266 5.50704C10.0312 5.92123 9.69907 6.26068 9.28488 6.26521C6.29027 6.29801 3.8664 8.67842 3.75407 11.646L3.75 11.8641V18.8823C3.75 19.5932 4.29241 20.1775 4.98596 20.2437L5.11768 20.25H18.8823C19.5932 20.25 20.1775 19.7076 20.2437 19.014L20.25 18.8823V13.4661C20.25 13.0735 20.0815 12.7024 19.7916 12.4444L19.6773 12.3532L14.5729 8.70715C14.2358 8.4664 14.1577 7.99798 14.3985 7.66093C14.6174 7.35451 15.0244 7.26214 15.3498 7.42876L15.4447 7.48656L20.5491 11.1326C21.2489 11.6324 21.6845 12.4175 21.7432 13.2686L21.75 13.4661V18.8823C21.75 20.4095 20.5562 21.6579 19.0508 21.7451L18.8823 21.75H5.11768C3.59047 21.75 2.34209 20.5562 2.25487 19.0508L2.25 18.8823L2.25 11.8645C2.24811 7.97436 5.37855 4.80791 9.26846 4.7653Z" fill="currentColor"/></svg>`,

    // Search icon (from search.svg)
    search: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.0586 3.25C15.3713 3.25 18.8679 6.74599 18.8682 11.0586C18.8682 15.3714 15.3714 18.8682 11.0586 18.8682C6.74599 18.8679 3.25 15.3713 3.25 11.0586C3.25022 6.74612 6.74612 3.25022 11.0586 3.25ZM11.0586 4.75C7.57455 4.75022 4.75022 7.57455 4.75 11.0586C4.75 14.5428 7.57442 17.3679 11.0586 17.3682C14.543 17.3682 17.3682 14.543 17.3682 11.0586C17.3679 7.57442 14.5428 4.75 11.0586 4.75Z" fill="currentColor"/><path d="M15.5197 15.5197C15.7859 15.2534 16.2026 15.2292 16.4962 15.4471L16.5803 15.5197L20.5303 19.4697C20.8232 19.7626 20.8232 20.2374 20.5303 20.5303C20.2641 20.7966 19.8474 20.8208 19.5538 20.6029L19.4697 20.5303L15.5197 16.5803C15.2268 16.2874 15.2268 15.8126 15.5197 15.5197Z" fill="currentColor"/></svg>`,

    // Check icon (from check.svg)
    check: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20.5619 5.30779C20.7809 5.59354 20.7298 6.00405 20.4441 6.22308L20.3553 6.28833L9.10513 16.2898C8.86196 16.5031 8.50449 16.5281 8.23359 16.3645L8.14466 16.2898L3.64466 12.288C3.37726 12.0495 3.35377 11.6249 3.59226 11.3575C3.81134 11.1118 4.17468 11.0717 4.44188 11.2375L4.52854 11.3101L8.62497 14.9458L19.3948 5.41117C19.6806 5.19214 20.0911 5.2433 20.3101 5.52905L20.3754 5.61777L20.5619 5.30779Z" fill="currentColor"/></svg>`,

    // Tip icon (from tip.svg)
    tip: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15 14.44C15.4142 14.44 15.75 14.7758 15.75 15.19C15.75 15.5697 15.4678 15.8835 15.1018 15.9332L15 15.94H9C8.58578 15.94 8.25 15.6042 8.25 15.19C8.25 14.8103 8.53215 14.4965 8.89823 14.4468L9 14.44H15Z" fill="currentColor"/><path d="M11.1873 3.29774C15.2393 2.82215 18.7498 5.96687 18.7498 9.99989C18.7498 12.2174 17.669 14.2533 15.8895 15.5106C15.7959 15.5768 15.7498 15.6592 15.7498 15.7333V18.4999C15.7498 20.2951 14.295 21.7499 12.4998 21.7499H11.4998C9.70468 21.7498 8.24981 20.295 8.24981 18.4999V15.7372C8.24981 15.6599 8.20284 15.5757 8.10821 15.5087C6.02737 14.0383 4.92809 11.5326 5.3338 8.92274C5.79129 5.9851 8.22984 3.64425 11.1873 3.29774ZM17.2498 9.99989C17.2498 6.86217 14.5202 4.4173 11.3621 4.78798C9.07263 5.05621 7.16987 6.88243 6.81622 9.15321C6.49914 11.1927 7.35244 13.1379 8.97442 14.2841C9.45273 14.6226 9.74981 15.1537 9.74981 15.7372V18.4999C9.74981 19.4666 10.5331 20.2498 11.4998 20.2499H12.4998C13.4666 20.2499 14.2498 19.4667 14.2498 18.4999V15.7333C14.2498 15.152 14.5469 14.6223 15.0242 14.285C16.4103 13.3056 17.2498 11.7244 17.2498 9.99989Z" fill="currentColor"/><path d="M20.6597 3.27967C20.9526 2.98677 21.4274 2.98677 21.7203 3.27967C21.9866 3.54593 22.0108 3.9626 21.7929 4.25621L21.7203 4.34033L20.5303 5.53033C20.2374 5.82322 19.7626 5.82322 19.4697 5.53033C19.2034 5.26406 19.1792 4.8474 19.397 4.55379L19.4697 4.46967L20.6597 3.27967Z" fill="currentColor"/><path d="M3.46967 14.4697C3.76256 14.1768 4.23743 14.1768 4.53033 14.4697C4.79659 14.7359 4.8208 15.1526 4.60295 15.4462L4.53033 15.5303L3.34033 16.7203C3.04743 17.0132 2.57256 17.0132 2.27967 16.7203C2.0134 16.4541 1.98919 16.0374 2.20705 15.7438L2.27967 15.6597L3.46967 14.4697Z" fill="currentColor"/><path d="M3.27967 2.27967C3.54593 2.0134 3.9626 1.98919 4.25621 2.20705L4.34033 2.27967L5.53033 3.46967C5.82322 3.76256 5.82322 4.23743 5.53033 4.53033C5.26406 4.79659 4.8474 4.8208 4.55379 4.60295L4.46967 4.53033L3.27967 3.34033C2.98677 3.04743 2.98677 2.57256 3.27967 2.27967Z" fill="currentColor"/><path d="M19.4697 14.4697C19.7359 14.2034 20.1526 14.1792 20.4462 14.397L20.5303 14.4697L21.7203 15.6597C22.0132 15.9526 22.0132 16.4274 21.7203 16.7203C21.4541 16.9866 21.0374 17.0108 20.7438 16.7929L20.6597 16.7203L19.4697 15.5303C19.1768 15.2374 19.1768 14.7626 19.4697 14.4697Z" fill="currentColor"/><path d="M22.69 9.25C23.1042 9.25 23.44 9.58578 23.44 10C23.44 10.3797 23.1578 10.6935 22.7918 10.7432L22.69 10.75H21C20.5858 10.75 20.25 10.4142 20.25 10C20.25 9.6203 20.5322 9.30651 20.8982 9.25684L21 9.25H22.69Z" fill="currentColor"/><path d="M3 9.25C3.41421 9.25 3.75 9.58578 3.75 10C3.75 10.3797 3.46784 10.6935 3.10177 10.7432L3 10.75H1.31C0.895784 10.75 0.559998 10.4142 0.559998 10C0.559998 9.6203 0.842151 9.30651 1.20823 9.25684L1.31 9.25H3Z" fill="currentColor"/><path d="M14.87 17.25C15.2842 17.25 15.62 17.5858 15.62 18C15.62 18.3797 15.3378 18.6935 14.9718 18.7432L14.87 18.75H9C8.58578 18.75 8.25 18.4142 8.25 18C8.25 17.6203 8.53215 17.3065 8.89823 17.2568L9 17.25H14.87Z" fill="currentColor"/></svg>`
};

// Return inline SVG with className applied to the <svg> element
function icon(name, className = 'icon') {
    const svgContent = ICONS_SVG[name];
    if (!svgContent) return '';

    // Replace the opening <svg> tag to add our className
    return svgContent.replace('<svg', `<svg class="${className}"`);
}

// ========== UTILITY FUNCTIONS ==========

// Get icon for recipe type
function getRecipeIcon(recipe) {
    if (recipe.tags.includes('vegano') || recipe.tags.includes('vegetariano') || recipe.category === 'vegano') {
        return icon('veggie', 'recipe-type-icon');
    }
    if (recipe.tags.includes('pesce')) return icon('fish', 'recipe-type-icon');
    if (recipe.tags.includes('carne') || recipe.tags.includes('proteico')) return icon('meat', 'recipe-type-icon');
    if (recipe.category === 'dolce') return icon('pancake', 'recipe-type-icon');
    return icon('dish', 'recipe-type-icon');
}

// Check if recipe matches filters
function matchesFilters(recipe) {
    // Search filter
    if (activeFilters.search) {
        const searchTerm = activeFilters.search.toLowerCase();
        const matchName = recipe.name.toLowerCase().includes(searchTerm);
        const matchIngredients = recipe.ingredients?.some(ing =>
            ing.toLowerCase().includes(searchTerm)
        );
        if (!matchName && !matchIngredients) return false;
    }

    // Quick filters
    if (activeFilters.quick !== 'all') {
        if (activeFilters.quick === 'veloce') {
            if (recipe.time > 15) return false;
        }
        if (activeFilters.quick === 'veggie') {
            const isVeggie = recipe.tags.includes('vegano') ||
                           recipe.tags.includes('vegetariano') ||
                           recipe.category === 'vegano';
            if (!isVeggie) return false;
        }
    }

    // Advanced filters
    for (const filter of activeFilters.advanced) {
        if (filter === 'carne' && !recipe.tags.includes('carne') && !recipe.tags.includes('proteico')) {
            return false;
        }
        if (filter === 'pesce' && !recipe.tags.includes('pesce')) {
            return false;
        }
        if (filter === 'vegano' && recipe.category !== 'vegano') {
            return false;
        }
        if (filter === 'uova' && !recipe.ingredients?.some(ing => ing.toLowerCase().includes('uov'))) {
            return false;
        }
        if (filter === 'time-5' && recipe.time > 5) {
            return false;
        }
        if (filter === 'time-15' && (recipe.time <= 5 || recipe.time > 15)) {
            return false;
        }
        if (filter === 'time-30' && (recipe.time <= 15 || recipe.time > 30)) {
            return false;
        }
        if (filter === 'facilissimo' && recipe.difficulty !== 'facilissimo') {
            return false;
        }
        if (filter === 'facile' && recipe.difficulty !== 'facile') {
            return false;
        }
        if (filter === 'media' && recipe.difficulty !== 'media') {
            return false;
        }
    }

    return true;
}

// Apply smart pre-filters based on context
function getSmartPreFilters(mealKey) {
    const hour = new Date().getHours();
    const filters = { quick: 'all', advanced: [] };

    // Morning breakfast - suggest quick recipes
    if (mealKey === 'colazione' && hour >= 6 && hour < 10) {
        filters.quick = 'veloce';
    }

    // Post-workout lunch - suggest proteic (handled by tags naturally)
    if (mealKey === 'pranzo' && currentDayType === 'workout') {
        // Recipes already tagged appropriately
    }

    return filters;
}

// ========== MEAL CARDS (MAIN PAGE) ==========

function loadMeals() {
    const container = document.getElementById('mealsContainer');
    if (!container) return;

    const meals = nutritionRecipes[currentDayType];
    const today = new Date().toISOString().split('T')[0];

    let html = '';

    for (const [key, meal] of Object.entries(meals)) {
        const mealId = `${today}-${currentDayType}-${key}`;
        const isCompleted = completedMeals[mealId] || false;
        const selectedRecipeId = selectedRecipes[`${currentDayType}-${key}`];
        const selectedRecipe = selectedRecipeId ?
            meal.recipes.find(r => r.id === selectedRecipeId) : null;

        html += `
            <div class="meal-card ${isCompleted ? 'completed' : ''}">
                <div class="meal-header">
                    <div>
                        <div class="meal-time">${meal.time}</div>
                    </div>
                    <div class="checkbox-meal ${isCompleted ? 'checked' : ''}" onclick="toggleMeal('${mealId}')">
                        ${isCompleted ? icon('check', 'checkbox-icon') : ''}
                    </div>
                </div>
                <div class="meal-name">${meal.name}</div>
                <div class="meal-description">${meal.description}</div>

                ${selectedRecipe ? `
                    <div class="meal-selected-recipe">
                        <div class="selected-recipe-label">${icon('check', 'selected-icon')} Selezionata:</div>
                        <div class="selected-recipe-name">${selectedRecipe.name}</div>
                        <div class="selected-recipe-macros">
                            ${selectedRecipe.macros.calories} â€¢
                            ${selectedRecipe.macros.protein} P â€¢
                            ${selectedRecipe.macros.carbs} C
                        </div>
                    </div>
                ` : ''}

                <div class="meal-actions">
                    <button class="meal-btn primary" onclick="openRecipeSheet('${currentDayType}', '${key}')">
                        ${selectedRecipe ? 'Cambia Ricetta' : `Scegli Ricetta (${meal.recipes.length})`}
                    </button>
                </div>
            </div>
        `;
    }

    container.innerHTML = html;
    updateCalorieTracker();
}

function updateCalorieTracker() {
    const meals = nutritionRecipes[currentDayType];
    const targetCalories = currentDayType === 'workout' ? 2900 : 2300;

    let totalCalories = 0;

    // Calculate total calories from selected recipes
    for (const [key, meal] of Object.entries(meals)) {
        const selectedRecipeId = selectedRecipes[`${currentDayType}-${key}`];
        const selectedRecipe = selectedRecipeId ?
            meal.recipes.find(r => r.id === selectedRecipeId) : null;

        if (selectedRecipe && selectedRecipe.macros && selectedRecipe.macros.calories) {
            totalCalories += parseInt(selectedRecipe.macros.calories);
        }
    }

    // Update UI
    const percentage = Math.min((totalCalories / targetCalories) * 100, 100);
    const remaining = Math.max(targetCalories - totalCalories, 0);

    // Update text
    const trackerHeader = document.querySelector('.calorie-tracker-header .calorie-text');
    if (trackerHeader) {
        trackerHeader.innerHTML = `<strong>${totalCalories}</strong> / ${targetCalories} kcal`;
    }

    const trackerPercentage = document.querySelector('.calorie-tracker-header .calorie-percentage');
    if (trackerPercentage) {
        trackerPercentage.textContent = `${Math.round(percentage)}%`;
    }

    const trackerRemaining = document.querySelector('.calorie-remaining');
    if (trackerRemaining) {
        trackerRemaining.textContent = `Rimanenti: ${remaining} kcal`;
    }

    // Update progress bar
    const progressFill = document.querySelector('.calorie-progress-fill');
    if (progressFill) {
        progressFill.style.width = `${percentage}%`;

        // Update status class
        progressFill.classList.remove('status-good', 'status-warning', 'status-danger');
        if (percentage < 70) {
            progressFill.classList.add('status-good');
        } else if (percentage < 90) {
            progressFill.classList.add('status-warning');
        } else {
            progressFill.classList.add('status-danger');
        }
    }
}

function toggleMeal(mealId) {
    completedMeals[mealId] = !completedMeals[mealId];
    localStorage.setItem('completedMeals', JSON.stringify(completedMeals));
    loadMeals();
}

// ========== BOTTOM SHEET ==========

function openRecipeSheet(dayType, mealKey) {
    currentDayType = dayType;
    currentMealKey = mealKey;
    currentMeal = nutritionRecipes[dayType][mealKey];
    allRecipes = currentMeal.recipes;

    // Apply smart pre-filters
    const smartFilters = getSmartPreFilters(mealKey);
    activeFilters.quick = smartFilters.quick;
    activeFilters.advanced = smartFilters.advanced;
    activeFilters.search = '';

    // Update UI
    const sheet = document.getElementById('recipeBottomSheet');
    const title = document.getElementById('sheetTitle');

    if (title) title.textContent = currentMeal.name;

    // Reset search
    const searchInput = document.getElementById('recipeSearch');
    if (searchInput) searchInput.value = '';

    // Update filter chips
    updateFilterChips();

    // Filter and render recipes
    applyFiltersAndRender();

    // Show sheet
    if (sheet) {
        sheet.classList.add('active');
        document.body.style.overflow = 'hidden';
    }
}

function closeRecipeSheet() {
    const sheet = document.getElementById('recipeBottomSheet');
    if (sheet) {
        sheet.classList.remove('active');
        document.body.style.overflow = '';
    }
}

// ========== FILTERING ==========

function updateFilterChips() {
    const chips = document.querySelectorAll('.filter-chips .chip');
    chips.forEach(chip => {
        const filter = chip.getAttribute('data-filter');
        if (filter === activeFilters.quick) {
            chip.classList.add('active');
        } else {
            chip.classList.remove('active');
        }
    });
}

function applyFiltersAndRender() {
    filteredRecipes = allRecipes.filter(matchesFilters);
    renderRecipeCards();
    updateRecipeCount();
}

function updateRecipeCount() {
    const countElement = document.getElementById('recipeCount');
    if (countElement) {
        countElement.textContent = filteredRecipes.length;
    }
}

// ========== RECIPE CARDS RENDERING ==========

function renderRecipeCards() {
    const container = document.getElementById('recipesList');
    if (!container) return;

    if (filteredRecipes.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px 20px; color: var(--color-text-muted);">
                <div style="font-size: 48px; margin-bottom: 16px;">${icon('search', 'empty-state-icon')}</div>
                <div style="font-size: 16px; font-weight: 600; margin-bottom: 8px;">Nessuna ricetta trovata</div>
                <div style="font-size: 14px;">Prova a modificare i filtri</div>
            </div>
        `;
        return;
    }

    const selectedRecipeId = selectedRecipes[`${currentDayType}-${currentMealKey}`];

    let html = '';
    filteredRecipes.forEach(recipe => {
        const recipeIcon = getRecipeIcon(recipe);
        const isSelected = recipe.id === selectedRecipeId;
        const isVeloce = recipe.time <= 15;
        const isProteico = recipe.macros && parseInt(recipe.macros.protein) >= 25;

        html += `
            <div class="recipe-card ${isSelected ? 'selected' : ''}" data-recipe-id="${recipe.id}">
                <div class="recipe-header">
                    <div class="recipe-name" onclick="toggleRecipeDetail('${recipe.id}')">
                        ${recipe.name}
                    </div>
                    <div class="recipe-tags">
                        <span class="recipe-tag">${recipeIcon}</span>
                    </div>
                </div>

                <div class="recipe-meta">
                    <div class="recipe-meta-item">
                        ${recipe.difficulty === 'facilissimo' ? 'Facilissimo' :
                          recipe.difficulty === 'facile' ? 'Facile' :
                          recipe.difficulty === 'media' ? 'Medio' : 'Difficile'}
                    </div>
                    <div class="recipe-meta-item">
                        ${icon('clock', 'icon-inline')} ${recipe.time} min
                    </div>
                </div>

                ${isVeloce || isProteico || recipe.tags.includes('meal-prep') ? `
                    <div class="recipe-badges">
                        ${isVeloce ? `<span class="recipe-badge veloce">${icon('fast', 'badge-icon')} Veloce</span>` : ''}
                        ${isProteico ? '<span class="recipe-badge proteico">Proteico</span>' : ''}
                        ${recipe.tags.includes('meal-prep') ? '<span class="recipe-badge">Meal Prep</span>' : ''}
                    </div>
                ` : ''}

                ${recipe.macros ? `
                    <div class="recipe-macros">
                        <div class="macro-item">
                            <span class="value">${recipe.macros.calories}</span>
                        </div>
                        <div class="macro-item">
                            ${icon('protein', 'macro-icon')}
                            <span class="value">${recipe.macros.protein}</span>
                        </div>
                        <div class="macro-item">
                            ${icon('carbs', 'macro-icon')}
                            <span class="value">${recipe.macros.carbs}</span>
                        </div>
                        <div class="macro-item">
                            ${icon('fats', 'macro-icon')}
                            <span class="value">${recipe.macros.fats}</span>
                        </div>
                    </div>
                ` : ''}

                <div class="recipe-actions">
                    <button class="recipe-btn recipe-btn-primary" onclick="selectRecipe('${recipe.id}')">
                        ${isSelected ? `Deseleziona ${icon('check', 'icon-inline')}` : 'Seleziona'}
                    </button>
                </div>

                <div class="recipe-detail" id="detail-${recipe.id}">
                    ${recipe.ingredients ? `
                        <h4>Ingredienti</h4>
                        <ul>
                            ${recipe.ingredients.map(ing => `<li>${ing}</li>`).join('')}
                        </ul>
                    ` : ''}
                    ${recipe.tips ? `
                        <div style="margin-top: 12px; padding: 10px; background: rgba(0, 135, 95, 0.1); border-radius: 8px; font-size: 13px;">
                            ${icon('tip', 'icon-inline')} ${recipe.tips}
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    });

    container.innerHTML = html;
}

function toggleRecipeDetail(recipeId) {
    const detail = document.getElementById(`detail-${recipeId}`);
    if (detail) {
        detail.classList.toggle('expanded');
    }
}

function selectRecipe(recipeId) {
    const key = `${currentDayType}-${currentMealKey}`;

    // Toggle: if already selected, deselect it
    if (selectedRecipes[key] === recipeId) {
        delete selectedRecipes[key];
        localStorage.setItem('selectedRecipes', JSON.stringify(selectedRecipes));

        // Update UI immediately
        renderRecipeCards();
        loadMeals();

        // Don't close the sheet, user might want to select another
        return;
    }

    // Otherwise, select this recipe
    selectedRecipes[key] = recipeId;
    localStorage.setItem('selectedRecipes', JSON.stringify(selectedRecipes));

    // Update UI
    renderRecipeCards();

    // Close sheet after short delay
    setTimeout(() => {
        closeRecipeSheet();
        loadMeals(); // Reload meal cards to show selection
    }, 300);
}

// ========== FILTER DRAWER ==========

function openFilterDrawer() {
    const drawer = document.getElementById('filterDrawer');
    if (drawer) {
        drawer.classList.add('active');

        // Update active state of advanced filters
        document.querySelectorAll('.filter-option').forEach(option => {
            const filter = option.getAttribute('data-filter');
            if (activeFilters.advanced.includes(filter)) {
                option.classList.add('active');
            } else {
                option.classList.remove('active');
            }
        });
    }
}

function closeFilterDrawer() {
    const drawer = document.getElementById('filterDrawer');
    if (drawer) {
        drawer.classList.remove('active');
    }
}

function resetAllFilters() {
    activeFilters.quick = 'all';
    activeFilters.advanced = [];
    activeFilters.search = '';

    const searchInput = document.getElementById('recipeSearch');
    if (searchInput) searchInput.value = '';

    updateFilterChips();
    closeFilterDrawer();
    applyFiltersAndRender();
}

function applyAdvancedFilters() {
    closeFilterDrawer();
    applyFiltersAndRender();
}

// ========== EVENT HANDLERS ==========

function switchDayType(type) {
    currentDayType = type;

    // Update buttons
    document.querySelectorAll('.day-type-btn').forEach(btn => btn.classList.remove('active'));
    const btn = document.getElementById(type === 'workout' ? 'btnWorkout' : 'btnRest');
    if (btn) btn.classList.add('active');

    loadMeals();
}

// ========== INITIALIZATION ==========

document.addEventListener('DOMContentLoaded', function() {
    // Load initial meals
    loadMeals();

    // Day type buttons
    const btnWorkout = document.getElementById('btnWorkout');
    const btnRest = document.getElementById('btnRest');

    if (btnWorkout) btnWorkout.addEventListener('click', () => switchDayType('workout'));
    if (btnRest) btnRest.addEventListener('click', () => switchDayType('rest'));

    // Bottom sheet backdrop click
    const sheetBackdrop = document.querySelector('.sheet-backdrop');
    if (sheetBackdrop) {
        sheetBackdrop.addEventListener('click', closeRecipeSheet);
    }

    // Search input
    const searchInput = document.getElementById('recipeSearch');
    if (searchInput) {
        searchInput.addEventListener('input', (e) => {
            activeFilters.search = e.target.value;
            applyFiltersAndRender();
        });
    }

    // Filter chips
    document.querySelectorAll('.filter-chips .chip:not(.filter-more)').forEach(chip => {
        chip.addEventListener('click', function() {
            const filter = this.getAttribute('data-filter');
            activeFilters.quick = filter;
            updateFilterChips();
            applyFiltersAndRender();
        });
    });

    // Advanced filter options
    document.querySelectorAll('.filter-option').forEach(option => {
        option.addEventListener('click', function() {
            const filter = this.getAttribute('data-filter');
            const index = activeFilters.advanced.indexOf(filter);

            if (index > -1) {
                activeFilters.advanced.splice(index, 1);
                this.classList.remove('active');
            } else {
                activeFilters.advanced.push(filter);
                this.classList.add('active');
            }
        });
    });

    // Swipe gesture for bottom sheet (basic implementation)
    let startY = 0;
    let currentY = 0;
    const sheetHandle = document.querySelector('.sheet-handle');

    if (sheetHandle) {
        sheetHandle.addEventListener('touchstart', (e) => {
            startY = e.touches[0].clientY;
        });

        sheetHandle.addEventListener('touchmove', (e) => {
            currentY = e.touches[0].clientY;
            const diff = currentY - startY;

            if (diff > 50) {
                closeRecipeSheet();
            }
        });
    }
});

// Make functions globally accessible
window.switchDayType = switchDayType;
window.toggleMeal = toggleMeal;
window.openRecipeSheet = openRecipeSheet;
window.closeRecipeSheet = closeRecipeSheet;
window.selectRecipe = selectRecipe;
window.toggleRecipeDetail = toggleRecipeDetail;
window.openFilterDrawer = openFilterDrawer;
window.closeFilterDrawer = closeFilterDrawer;
window.resetAllFilters = resetAllFilters;
window.applyAdvancedFilters = applyAdvancedFilters;
